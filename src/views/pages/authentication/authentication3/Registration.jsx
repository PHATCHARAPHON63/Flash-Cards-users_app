import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { register } from '../../../../component/function/register';
// material-ui
import {
  Grid,
  Typography,
  AppBar,
  Box,
  TextField,
  FormControl,
  Select,
  MenuItem,
  Button,
  InputLabel,
  LinearProgress,
  FormHelperText,
  Dialog,
  DialogContent,
  Popover,
  IconButton,
  InputAdornment
} from '@mui/material';
// project imports
import VisibilityIcon from '@mui/icons-material/Visibility';
import VisibilityOffIcon from '@mui/icons-material/VisibilityOff';
import AuthWrapper1 from '../AuthWrapper1';
import HighlightOffIcon from '@mui/icons-material/HighlightOff';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import PersonIcon from '@mui/icons-material/Person';
import LockPersonIcon from '@mui/icons-material/LockPerson';
import CancelOutlinedIcon from '@mui/icons-material/CancelOutlined';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
const validatePassword = (password) => {
  const requirements = {
    minLength: password.length >= 8,
    hasUpperCase: /[A-Z]/.test(password),
    hasLowerCase: /[a-z]/.test(password),
    hasNumber: /\d/.test(password),
    hasSpecial: /[!@#$%^&*(),.?":{}|<>]/.test(password)
  };

  return {
    isValid: Object.values(requirements).every((req) => req),
    requirements
  };
};

const Registration = () => {
  // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® state ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const navigate = useNavigate();
  const [submissionAttempted, setSubmissionAttempted] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState(null);
  const [showPasswordPopover, setShowPasswordPopover] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [passwordFieldRef, setPasswordFieldRef] = useState(null);

  // Dialog states
  const [isSuccessDialogOpen, setIsSuccessDialogOpen] = useState(false);
  const [isEmailErrorDialogOpen, setIsEmailErrorDialogOpen] = useState(false);
  const [isPhoneErrorDialogOpen, setIsPhoneErrorDialogOpen] = useState(false);
  const [errors, setErrors] = useState({});

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°
  const [formData, setFormData] = useState({
    title: '',
    first_name: '',
    last_name: '',
    id_card: '',
    birth_date: null,
    gender: '',
    phone_number: '',
    email: '',
    user_type: '',
    password: '',
    confirmPassword: '',
    gen_id: generateRandomId()
  });

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á gen_id ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡πÇ‡∏´‡∏•‡∏î
  useEffect(() => {
    if (!formData.gen_id) {
      setFormData((prev) => ({
        ...prev,
        gen_id: generateRandomId()
      }));
    }
  }, []);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á gen_id ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
  function generateRandomId() {
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    const length = 20;
    let result = '';
    for (let i = 0; i < length; i++) {
      const randomIndex = Math.floor(Math.random() * characters.length);
      result += characters[randomIndex];
    }
    return result;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
  const isValidThai = (text) => {
    const thaiRegex = /^[\u0E00-\u0E7F\s]*$/;
    return thaiRegex.test(text);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
  const validateThaiID = (id) => {
    // ‡∏•‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ - ‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    const cleanId = id.replace(/-/g, '');

    if (!cleanId) return false;
    if (cleanId.length !== 13 || !/^\d{13}$/.test(cleanId)) return false;

    let sum = 0;
    for (let i = 0; i < 12; i++) {
      sum += parseInt(cleanId.charAt(i)) * (13 - i);
    }

    const checkDigit = (11 - (sum % 11)) % 10;
    return checkDigit === parseInt(cleanId.charAt(12));
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
  const checkPasswordStrength = (password) => {
    const criteria = {
      length: password.length >= 8,
      upperLower: /(?=.*[a-z])(?=.*[A-Z])/.test(password),
      number: /\d/.test(password),
      special: /[!@#$%^&*(),.?":{}|<>]/.test(password)
    };
    return criteria;
  };

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
  const calculatePasswordStrength = (password) => {
    let score = 0;
    let level = '';
    let color = '';

    if (password.length >= 8) score += 25;
    if (/(?=.*[a-z])/.test(password)) score += 15;
    if (/(?=.*[A-Z])/.test(password)) score += 15;
    if (/(?=.*[0-9])/.test(password)) score += 25;
    if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) score += 20;

    if (score >= 100) {
      level = '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å';
      color = '#2E7D32';
    } else if (score >= 80) {
      level = '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏π‡∏á';
      color = '#4CAF50';
    } else if (score >= 60) {
      level = '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
      color = '#FFA726';
    } else if (score >= 30) {
      level = '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ï‡πà‡∏≥';
      color = '#F57C00';
    } else {
      level = '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å';
      color = '#D32F2F';
    }

    return { score, level, color };
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
  const handleDateChange = (name, date) => {
    setFormData((prevState) => ({
      ...prevState,
      [name]: date
    }));
    if (errors[name]) {
      setErrors((prev) => ({ ...prev, [name]: null }));
    }
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
  const handlePasswordChange = (event) => {
    const { name, value } = event.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value
    }));
    setErrors((prev) => ({
      ...prev,
      password: null
    }));
    setPasswordFieldRef(event.currentTarget);
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
  const handleChange = (event) => {
    const { name, value } = event.target;
    setFormData((prevState) => ({
      ...prevState,
      [name]: value
    }));
    if (errors[name]) {
      setErrors((prev) => ({ ...prev, [name]: null }));
    }
  };

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
  const resetForm = () => {
    setFormData({
      title: '',
      first_name: '',
      last_name: '',
      id_card: '',
      birth_date: null,
      gender: '',
      phone_number: '',
      email: '',
      user_type: '',
      password: '',
      confirmPassword: '',
      gen_id: generateRandomId()
    });
    setErrors({});
    setIsSubmitted(false);
    setIsSubmitting(false);
    setSubmitError(null);
  };

  // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
  const handleBackToHome = () => {
    navigate('/Login');
  };

  // ‡∏õ‡∏¥‡∏î dialog ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  const handleDialogClose = () => {
    setIsSuccessDialogOpen(false);
    setIsEmailErrorDialogOpen(false);
    setIsPhoneErrorDialogOpen(false);
    navigate('/Login');
  };

  const calculateExpiryDate = () => {
    const date = new Date();
    date.setDate(date.getDate() + 3);
    return date.toLocaleDateString('th-TH', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
  const handleSubmit = async (event) => {
    event.preventDefault();
    let newErrors = {};
    let isValid = true;
    setIsSubmitted(true);
    setSubmissionAttempted(true);

    console.log('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°...');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const requiredFields = ['title', 'first_name', 'last_name', 'phone_number', 'email', 'user_type', 'password', 'confirmPassword'];

    console.log('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô...');
    requiredFields.forEach((field) => {
      if (!formData[field]) {
        newErrors[field] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ';
        isValid = false;
        console.log(`üî¥ ‡∏ü‡∏¥‡∏•‡∏î‡πå ${field} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`);
      } else {
        console.log(`‚úÖ ‡∏ü‡∏¥‡∏•‡∏î‡πå ${field} ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô`);
      }
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log('\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');

    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
    if (formData.email && !emailRegex.test(formData.email)) {
      newErrors.email = '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
      isValid = false;
      console.log('üî¥ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    } else {
      console.log('‚úÖ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
    const phoneRegex = /^([0-9]{3})-([0-9]{3})-([0-9]{4})$/;
    const cleanedPhoneNumber = formData.phone_number.replace(/\D/g, '');

    if (formData.phone_number && !phoneRegex.test(formData.phone_number)) {
      newErrors.phone_number = '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (xxx-xxx-xxxx)';
      isValid = false;
      console.log('üî¥ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    } else if (cleanedPhoneNumber && cleanedPhoneNumber.length !== 10) {
      newErrors.phone_number = '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 10 ‡∏´‡∏•‡∏±‡∏Å';
      isValid = false;
      console.log('üî¥ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 10 ‡∏´‡∏•‡∏±‡∏Å');
    } else if (cleanedPhoneNumber && !['06', '08', '09'].includes(cleanedPhoneNumber.substring(0, 2))) {
      newErrors.phone_number = '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 06, 08 ‡∏´‡∏£‡∏∑‡∏≠ 09';
      isValid = false;
      console.log('üî¥ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 06, 08 ‡∏´‡∏£‡∏∑‡∏≠ 09');
    } else {
      console.log('‚úÖ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    if (formData.password) {
      const { isValid: isPasswordValid, requirements: passwordErrors } = validatePassword(formData.password);
      if (!isPasswordValid) {
        newErrors.password = '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î';
        isValid = false;
        console.log('üî¥ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î:', passwordErrors);
      } else {
        console.log('‚úÖ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î');
      }
    }

    if (formData.password && formData.confirmPassword && formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô';
      isValid = false;
      console.log('üî¥ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');
    } else {
      console.log('‚úÖ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');
    }

    setErrors(newErrors);

    if (!isValid) {
      console.log('\n‚ùå ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:', newErrors);
      return;
    }

    console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ú‡πà‡∏≤‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');

    try {
      setIsSubmitting(true);
      setSubmitError(null);

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ API
      const dataToSend = {
        prefix: formData.title,
        first_name: formData.first_name,
        last_name: formData.last_name,
        email: formData.email,
        password: formData.password,
        phone_number: formData.phone_number.replace(/-/g, ''), // ‡∏•‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ - ‡∏≠‡∏≠‡∏Å
        role: mapUserTypeToRole(formData.user_type), // ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô role ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        status_user: 'active', // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        gen_id: formData.gen_id, // ‡πÉ‡∏ä‡πâ gen_id ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
        google_id: '', // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡πà‡∏≤‡∏á
        reset_password_token: '',
        reset_password_auth_tag: '',
        reset_password_expires: '',
        time_stamps_mail: Date.now().toString(),
        count_mail: '0',
        profile_image: '',
        login_attempts: 0
      };

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API register
      const response = await register(dataToSend);

      console.log('‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å API:', response);

      if (response && response.message === '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à') {
        setIsSuccessDialogOpen(true);
        resetForm();
      } else {
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ response ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
        setSubmitError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      }
    } catch (error) {
      console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å API:', error);

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å API
      if (error.message && error.message.includes('‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß')) {
        setIsEmailErrorDialogOpen(true);
      } else if (error.message && error.message.includes('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß')) {
        setIsPhoneErrorDialogOpen(true);
      } else {
        setSubmitError(error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô role ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô API
  const mapUserTypeToRole = (userType) => {
    switch (userType) {
      case '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏π/‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤':
        return 'teacher';
      case '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô':
        return 'student';
      case '‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ':
        return 'user';
      default:
        return 'user'; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    }
  };

  // ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö TextField
  const commonTextFieldProps = {
    fullWidth: true,
    onChange: handleChange,
    variant: 'outlined',
    InputLabelProps: {
      shrink: true,
      sx: {
        backgroundColor: 'white',
        padding: '0 6px',
        marginLeft: '1px',
        color: '#000000',
        '&.Mui-focused': { color: 'inherit' },
        fontSize: 16,
        '& .required-star': {
          color: '#FF0000',
          marginLeft: '2px',
          fontSize: 16,
          fontWeight: 700
        }
      }
    }
  };

  return (
    <AuthWrapper1 style={{ backgroundColor: '#FFFFFF' }}>
      <Grid container sx={{ width: '100vw', minHeight: '100vh', position: 'relative', paddingBottom: '80px' }}>
        <Grid container spacing={0} justifyContent="center">
          <Grid item xs={12} sm={12} md={7} lg={12} sx={{ background: '#FFFFFF' }}>
            <Box sx={{ flexGrow: 1 }}>
              <AppBar position="static" sx={{ alignItems: 'center', p: 2, background: '#05255B' }} color="secondary">
                <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', textAlign: 'center', width: '100%' }}>
                  <Typography variant="h5" component="div" sx={{ color: '#FFFFFF' }}>
                    Flash Cards Registration
                  </Typography>
                </Box>
              </AppBar>
            </Box>

            <Grid container mt={6} sx={{ display: 'flex', justifyContent: 'center' }}>
              <Grid item xs={10}>
                {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏ß‡∏° */}
                {submitError && (
                  <Box sx={{ backgroundColor: '#FFEBEE', padding: 2, marginBottom: 2, borderRadius: 1 }}>
                    <Typography color="error">{submitError}</Typography>
                  </Box>
                )}

                <form onSubmit={handleSubmit}>
                  <Grid container spacing={3}>
                    <Grid item xs={12}>
                      <Typography
                        sx={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: 1 // spacing ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á icon ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                        }}
                      >
                        <PersonIcon />
                        <span
                          style={{
                            color: 'black',
                            fontSize: 16,
                            fontWeight: 700
                          }}
                        >
                          ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
                        </span>
                      </Typography>
                    </Grid>
                    <Grid item xs={12}>
                      <Box sx={{ width: '100%', height: '2px', backgroundColor: '#000000' }} />
                    </Grid>
                    <Grid item xs={12} sm={4}>
                      <FormControl fullWidth variant="outlined" error={!!errors.title}>
                        <InputLabel
                          id="title"
                          shrink={true}
                          sx={{
                            color: errors.title ? 'red' : '#000000',
                            fontSize: 16,
                            '&.Mui-focused': { color: 'inherit' },
                            backgroundColor: 'white',
                            padding: '0 6px',
                            marginLeft: '1px'
                          }}
                        >
                          <span style={{ display: 'flex', fontSize: 18 }}>
                            ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠ <span style={{ color: '#FF0000', fontSize: 16, fontWeight: 700, wordWrap: 'break-word' }}> *</span>
                          </span>
                        </InputLabel>
                        <Select
                          labelId="title"
                          id="title"
                          name="title"
                          value={formData.title}
                          onChange={(e) => {
                            handleChange(e);
                            if (errors.title) {
                              setErrors((prev) => ({ ...prev, title: null }));
                            }
                          }}
                          displayEmpty
                          renderValue={(selected) => {
                            if (!selected) {
                              return <span style={{ color: '#757575', fontSize: 14 }}>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤</span>;
                            }
                            return selected;
                          }}
                          sx={{
                            '& .MuiSelect-icon': {
                              color: '#B9B7B7'
                            }
                          }}
                        >
                          <MenuItem value="‡∏ô‡∏≤‡∏¢">‡∏ô‡∏≤‡∏¢</MenuItem>
                          <MenuItem value="‡∏ô‡∏≤‡∏á">‡∏ô‡∏≤‡∏á</MenuItem>
                          <MenuItem value="‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß">‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß</MenuItem>
                          <MenuItem value="‡πÄ‡∏î‡πá‡∏Å‡∏ä‡∏≤‡∏¢">‡πÄ‡∏î‡πá‡∏Å‡∏ä‡∏≤‡∏¢</MenuItem>
                          <MenuItem value="‡πÄ‡∏î‡πá‡∏Å‡∏´‡∏ç‡∏¥‡∏á">‡πÄ‡∏î‡πá‡∏Å‡∏´‡∏ç‡∏¥‡∏á</MenuItem>
                        </Select>
                        {errors.title && <FormHelperText error>{errors.title}</FormHelperText>}
                      </FormControl>
                    </Grid>
                    <Grid item xs={12} sm={4}>
                      <TextField
                        {...commonTextFieldProps}
                        name="first_name"
                        value={formData.first_name}
                        label={
                          <span style={{ display: 'flex' }}>
                            <span style={{ color: '#000000' }}>‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠</span>
                            <span style={{ color: '#FF0000', fontSize: 16, fontWeight: 700 }}>*</span>
                          </span>
                        }
                        placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠"
                        error={!!errors.first_name}
                        helperText={errors.first_name}
                        onKeyPress={(event) => {
                          const thaiRegex = /^[\u0E00-\u0E7Fa-zA-Z\s]*$/;
                          if (!thaiRegex.test(event.key) || event.key === ' ') {
                            event.preventDefault();
                          }
                        }}
                        sx={{
                          '& .MuiOutlinedInput-root': {
                            '& fieldset': {
                              borderColor: errors.first_name ? 'red' : '#B9B7B7'
                            },
                            '&:hover fieldset': {
                              borderColor: errors.first_name ? 'red' : '#B9B7B7'
                            },
                            '&.Mui-focused fieldset': {
                              borderColor: errors.first_name ? 'red' : '#B9B7B7'
                            }
                          },
                          '& .MuiInputLabel-root': {
                            color: '#757575'
                          },
                          '& input::placeholder': {
                            color: '#757575',
                            fontSize: '14px',
                            opacity: 1
                          }
                        }}
                      />
                    </Grid>
                    <Grid item xs={12} sm={4}>
                      <TextField
                        {...commonTextFieldProps}
                        name="last_name"
                        value={formData.last_name}
                        label={
                          <span style={{ display: 'flex' }}>
                            <span style={{ color: '#000000' }}>‡∏£‡∏∞‡∏ö‡∏∏‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</span>
                            <span style={{ color: '#FF0000', fontSize: 16, fontWeight: 700 }}> *</span>
                          </span>
                        }
                        placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                        error={!!errors.last_name}
                        helperText={errors.last_name}
                        onKeyPress={(event) => {
                          const thaiRegex = /^[\u0E00-\u0E7Fa-zA-Z\s]*$/;
                          if (!thaiRegex.test(event.key) || event.key === ' ') {
                            event.preventDefault();
                          }
                        }}
                        sx={{
                          '& .MuiOutlinedInput-root': {
                            '& fieldset': {
                              borderColor: errors.last_name ? 'red' : '#B9B7B7'
                            },
                            '&:hover fieldset': {
                              borderColor: errors.last_name ? 'red' : '#B9B7B7'
                            },
                            '&.Mui-focused fieldset': {
                              borderColor: errors.last_name ? 'red' : '#B9B7B7'
                            }
                          },
                          '& .MuiInputLabel-root': {
                            color: '#757575'
                          },
                          '& input::placeholder': {
                            color: '#757575',
                            fontSize: '14px',
                            opacity: 1
                          }
                        }}
                      />
                    </Grid>
                    <Grid item xs={12} sm={4}>
                      <TextField
                        {...commonTextFieldProps}
                        name="email"
                        value={formData.email}
                        label={
                          <span style={{ display: 'flex' }}>
                            <span style={{ color: '#000000' }}>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</span>
                            <span style={{ color: '#FF0000', fontSize: 16, fontWeight: 700 }}> *</span>
                          </span>
                        }
                        placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                        error={!!errors.email}
                        helperText={errors.email}
                        inputProps={{
                          onKeyDown: (event) => {
                            if (event.key === ' ') {
                              event.preventDefault();
                            }
                          }
                        }}
                        sx={{
                          '& .MuiOutlinedInput-root': {
                            '& fieldset': {
                              borderColor: errors.email ? 'red' : '#B9B7B7'
                            },
                            '&:hover fieldset': {
                              borderColor: errors.email ? 'red' : '#B9B7B7'
                            },
                            '&.Mui-focused fieldset': { borderColor: errors.email ? 'red' : '#B9B7B7' },
                            '&.Mui-focused fieldset': {
                              borderColor: errors.email ? 'red' : '#B9B7B7'
                            }
                          },
                          '& .MuiInputLabel-root': {
                            color: '#757575'
                          },
                          '& input::placeholder': {
                            color: '#757575',
                            fontSize: '14px',
                            opacity: 1
                          }
                        }}
                      />
                    </Grid>
                    <Grid item xs={12} sm={4}>
                      <TextField
                        {...commonTextFieldProps}
                        name="phone_number"
                        value={formData.phone_number}
                        label={
                          <span style={{ display: 'flex' }}>
                            <span style={{ color: '#000000' }}>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</span>
                            <span style={{ color: '#FF0000', fontSize: 16, fontWeight: 700 }}> *</span>
                          </span>
                        }
                        placeholder="xxx-xxx-xxxx"
                        error={!!errors.phone_number}
                        helperText={errors.phone_number}
                        inputProps={{
                          maxLength: 12
                        }}
                        onKeyPress={(event) => {
                          if (!/[0-9]/.test(event.key) || event.key === ' ') {
                            event.preventDefault();
                          }
                        }}
                        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô handleChange ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö phone_number
                        onChange={(e) => {
                          const { name, value } = e.target;
                          const numericValue = value.replace(/[^0-9]/g, '');

                          let formattedValue = '';
                          if (numericValue.length > 0) {
                            // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö xxx-xxx-xxxx
                            const parts = [];
                            if (numericValue.length > 0) parts.push(numericValue.slice(0, 3));
                            if (numericValue.length > 3) parts.push(numericValue.slice(3, 6));
                            if (numericValue.length > 6) parts.push(numericValue.slice(6, 10));

                            formattedValue = parts.join('-');
                          }
                          setErrors((prev) => ({
                            ...prev,
                            phone_number: null
                          }));
                          setFormData((prev) => ({
                            ...prev,
                            [name]: formattedValue
                          }));
                        }}
                        sx={{
                          '& .MuiOutlinedInput-root': {
                            '& fieldset': {
                              borderColor: errors.phone_number ? 'red' : '#B9B7B7'
                            },
                            '&:hover fieldset': {
                              borderColor: errors.phone_number ? 'red' : '#B9B7B7'
                            },
                            '&.Mui-focused fieldset': {
                              borderColor: errors.phone_number ? 'red' : '#B9B7B7'
                            }
                          },
                          '& .MuiInputLabel-root': {
                            color: '#757575'
                          },
                          '& input::placeholder': {
                            color: '#757575',
                            fontSize: '14px',
                            opacity: 1
                          }
                        }}
                      />
                    </Grid>

                    {/* User Type Select */}
                    <Grid item xs={12} sm={4}>
                      <FormControl fullWidth variant="outlined" error={!!errors.user_type}>
                        <InputLabel
                          id="user_type"
                          shrink={true}
                          sx={{
                            color: errors.user_type ? 'red' : '#000000',
                            fontSize: 16,
                            '&.Mui-focused': { color: 'inherit' },
                            backgroundColor: 'white',
                            padding: '0 6px',
                            marginLeft: '1px'
                          }}
                        >
                          <span style={{ display: 'flex' }}>
                            ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô{' '}
                            <span style={{ color: '#FF0000', fontSize: 16, fontWeight: 700, wordWrap: 'break-word' }}> *</span>
                          </span>
                        </InputLabel>
                        <Select
                          labelId="user_type"
                          id="user_type"
                          name="user_type"
                          value={formData.user_type}
                          onChange={(e) => {
                            handleChange(e);
                            if (errors.user_type) {
                              setErrors((prev) => ({ ...prev, user_type: null }));
                            }
                          }}
                          displayEmpty
                          renderValue={(selected) => {
                            if (!selected) {
                              return <span style={{ color: '#757575', fontSize: 14 }}>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</span>;
                            }
                            return selected;
                          }}
                          sx={{
                            '& .MuiSelect-icon': {
                              color: '#B9B7B7'
                            },
                            '& .MuiOutlinedInput-notchedOutline': {
                              borderColor: errors.user_type ? 'red' : '#B9B7B7'
                            }
                          }}
                        >
                          <MenuItem value="‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏π/‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤">‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏π/‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</MenuItem>
                          <MenuItem value="‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô">‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</MenuItem>
                          <MenuItem value="‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ">‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</MenuItem>
                        </Select>
                        {errors.user_type && <FormHelperText error>{errors.user_type}</FormHelperText>}
                      </FormControl>
                    </Grid>

                    <Grid item xs={12}>
                      <Typography
                        sx={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: 1 // spacing ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á icon ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                        }}
                      >
                        <LockPersonIcon />
                        <span
                          style={{
                            color: 'black',
                            fontSize: 16,
                            fontWeight: 700
                          }}
                        >
                          ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                        </span>
                      </Typography>
                    </Grid>
                    <Grid item xs={12}>
                      <Box sx={{ width: '100%', height: '2px', backgroundColor: '#000000' }} />
                    </Grid>

                    <Grid item xs={12} sm={12} mt={1}>
                      <Grid item xs={12} sm={12}>
                        <TextField
                          fullWidth
                          name="password"
                          type={showPassword ? 'text' : 'password'}
                          label={
                            <span style={{ display: 'flex' }}>
                              <span style={{ color: '#000000', fontSize: 16 }}>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</span>
                              <span style={{ color: '#FF0000', fontSize: 16, fontWeight: 700 }}> *</span>
                            </span>
                          }
                          placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                          value={formData.password}
                          onChange={(e) => {
                            const { name, value } = e.target;
                            setFormData((prev) => ({
                              ...prev,
                              [name]: value
                            }));
                            setErrors((prev) => ({
                              ...prev,
                              password: null
                            }));
                            if (!passwordFieldRef) {
                              setPasswordFieldRef(e.currentTarget);
                            }
                          }}
                          onFocus={() => setShowPasswordPopover(true)}
                          onBlur={() => setShowPasswordPopover(false)}
                          error={!!errors.password}
                          helperText={errors.password}
                          InputProps={{
                            endAdornment: (
                              <InputAdornment position="end">
                                <IconButton
                                  aria-label="toggle password visibility"
                                  onClick={() => setShowPassword(!showPassword)}
                                  onMouseDown={(e) => e.preventDefault()}
                                  edge="end"
                                >
                                  {showPassword ? <VisibilityIcon /> : <VisibilityOffIcon />}
                                </IconButton>
                              </InputAdornment>
                            )
                          }}
                          InputLabelProps={{
                            shrink: true
                          }}
                          sx={{
                            '& .MuiOutlinedInput-root': {
                              '& fieldset': {
                                borderColor: errors.password ? 'red' : '#B9B7B7'
                              },
                              '&:hover fieldset': {
                                borderColor: errors.password ? 'red' : '#B9B7B7'
                              },
                              '&.Mui-focused fieldset': {
                                borderColor: errors.password ? 'red' : '#B9B7B7'
                              }
                            },
                            '& input::placeholder': {
                              color: '#757575',
                              fontSize: '14px',
                              opacity: 1
                            }
                          }}
                        />

                        <Popover
                          open={showPasswordPopover && !!passwordFieldRef && formData.password.length > 0}
                          anchorEl={passwordFieldRef}
                          onClose={() => setShowPasswordPopover(false)}
                          disableRestoreFocus
                          disableAutoFocus
                          anchorOrigin={{
                            vertical: 'bottom',
                            horizontal: 'left'
                          }}
                          transformOrigin={{
                            vertical: 'top',
                            horizontal: 'left'
                          }}
                          sx={{
                            '& .MuiPopover-paper': {
                              padding: 2,
                              maxWidth: 300,
                              pointerEvents: 'none'
                            }
                          }}
                        >
                          <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1 }}>
                            ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
                          </Typography>
                          {formData.password && (
                            <>
                              <Box sx={{ width: '100%', mb: 2 }}>
                                <LinearProgress
                                  variant="determinate"
                                  value={calculatePasswordStrength(formData.password).score}
                                  sx={{
                                    height: 10,
                                    borderRadius: 5,
                                    backgroundColor: '#e0e0e0',
                                    '& .MuiLinearProgress-bar': {
                                      backgroundColor: calculatePasswordStrength(formData.password).color,
                                      borderRadius: 5
                                    }
                                  }}
                                />
                                <Typography
                                  variant="body2"
                                  sx={{
                                    mt: 0.5,
                                    color: calculatePasswordStrength(formData.password).color,
                                    textAlign: 'right',
                                    fontWeight: 'bold'
                                  }}
                                >
                                  {calculatePasswordStrength(formData.password).level}
                                </Typography>
                              </Box>

                              <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1 }}>
                                ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ:
                              </Typography>
                            </>
                          )}
                          {Object.entries(checkPasswordStrength(formData.password)).map(([criterion, isPassed]) => (
                            <Box key={criterion} sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 0.5 }}>
                              {isPassed ? (
                                <CheckCircleOutlineIcon color="success" fontSize="small" />
                              ) : (
                                <CancelOutlinedIcon color="error" fontSize="small" />
                              )}
                              <Typography>
                                {criterion === 'length' && '8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤'}
                                {criterion === 'upperLower' && '‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà'}
                                {criterion === 'number' && '‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç'}
                                {criterion === 'special' && '‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß'}
                              </Typography>
                            </Box>
                          ))}
                        </Popover>
                      </Grid>

                      <Grid item xs={12} sm={12} mt={3}>
                        <TextField
                          fullWidth
                          name="confirmPassword"
                          type={showConfirmPassword ? 'text' : 'password'}
                          label={
                            <span style={{ display: 'flex' }}>
                              <span style={{ color: '#000000' }}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</span>
                              <span style={{ color: '#FF0000', fontSize: 16, fontWeight: 700 }}> *</span>
                            </span>
                          }
                          placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                          value={formData.confirmPassword}
                          onChange={handlePasswordChange}
                          error={!!errors.confirmPassword}
                          helperText={errors.confirmPassword}
                          InputProps={{
                            endAdornment: (
                              <InputAdornment position="end">
                                <IconButton
                                  aria-label="toggle confirm password visibility"
                                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                                  onMouseDown={(e) => e.preventDefault()}
                                  edge="end"
                                >
                                  {showConfirmPassword ? <VisibilityIcon /> : <VisibilityOffIcon />}
                                </IconButton>
                              </InputAdornment>
                            )
                          }}
                          InputLabelProps={{
                            shrink: true
                          }}
                          sx={{
                            '& .MuiOutlinedInput-root': {
                              '& fieldset': {
                                borderColor: errors.confirmPassword ? 'red' : '#B9B7B7'
                              },
                              '&:hover fieldset': {
                                borderColor: errors.confirmPassword ? 'red' : '#B9B7B7'
                              },
                              '&.Mui-focused fieldset': {
                                borderColor: errors.confirmPassword ? 'red' : '#B9B7B7'
                              }
                            },
                            '& input::placeholder': {
                              color: '#757575',
                              fontSize: '14px',
                              opacity: 1
                            }
                          }}
                        />
                      </Grid>
                    </Grid>

                    <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'flex-end', mt: 3, mb: 12 }}>
                      {/* ‡πÄ‡∏û‡∏¥‡πà‡∏° mb: 12 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å footer */}
                      <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center' }}>
                        <Button
                          variant="outlined"
                          onClick={handleBackToHome}
                          sx={{
                            padding: '6px 12px',
                            width: 'auto',
                            height: 'auto',
                            minWidth: 'min-content',
                            color: '#05255B',
                            borderColor: '#05255B',
                            '&:hover': {
                              borderColor: '#05255B'
                            }
                          }}
                        >
                          ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                        </Button>

                        <Button
                          variant="contained"
                          color="secondary"
                          type="submit"
                          disabled={isSubmitting}
                          sx={{
                            padding: '6px 12px',
                            width: 'auto',
                            height: 'auto',
                            minWidth: 'min-content',
                            backgroundColor: '#05255B',
                            '&.Mui-disabled': {
                              backgroundColor: '#7B93B8',
                              color: '#FFFFFF'
                            }
                          }}
                        >
                          {isSubmitting ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...' : '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å'}
                        </Button>
                      </Box>
                    </Grid>
                  </Grid>
                </form>
              </Grid>
            </Grid>

            {/* Dialog ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à */}
            <Dialog
              open={isSuccessDialogOpen}
              onClose={handleDialogClose}
              aria-labelledby="alert-dialog-title"
              aria-describedby="alert-dialog-description"
            >
              <DialogContent sx={{ textAlign: 'center', p: 3 }}>
                <CheckCircleOutlineIcon sx={{ fontSize: 70, color: 'green', mb: 2 }} />
                <Typography id="alert-dialog-title" sx={{ fontSize: 16, color: '#05255B', mb: 2 }}>
                  ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
                </Typography>
                <Typography id="alert-dialog-description" sx={{ fontSize: 16, color: '#05255B', mb: 2 }}>
                  ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                </Typography>
                <Button
                  onClick={handleDialogClose}
                  variant="contained"
                  sx={{
                    mt: 2,
                    mb: 4,
                    backgroundColor: '#FFFFFF',
                    color: '#05255B',
                    border: '1px solid #05255B',
                    boxShadow: 'none',
                    width: '80px',
                    height: '40px',
                    '&:hover': {
                      backgroundColor: '#FFFFFF',
                      boxShadow: 'none'
                    },
                    '&:focus': {
                      boxShadow: 'none'
                    }
                  }}
                >
                  ‡∏ï‡∏Å‡∏•‡∏á
                </Button>
              </DialogContent>
            </Dialog>

            {/* Dialog ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥ */}
            <Dialog
              open={isEmailErrorDialogOpen}
              onClick={handleDialogClose}
              aria-labelledby="alert-dialog-title"
              aria-describedby="alert-dialog-description"
              maxWidth="sm"
              PaperProps={{
                sx: {
                  width: '500px',
                  maxHeight: '230px',
                  margin: '20px',
                  borderRadius: '8px'
                }
              }}
            >
              <DialogContent sx={{ textAlign: 'center', p: 3 }}>
                <HighlightOffIcon sx={{ fontSize: 70, color: 'red', mb: 2 }} />
                <Typography id="alert-dialog-description" sx={{ fontSize: 16, color: '#05255B', mb: 2 }}>
                  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
                </Typography>

                <Button
                  onClick={handleDialogClose}
                  variant="contained"
                  sx={{
                    mt: 2,
                    mb: 4,
                    backgroundColor: '#FFFFFF',
                    color: '#05255B',
                    border: '1px solid #05255B',
                    boxShadow: 'none',
                    width: '80px',
                    height: '40px',
                    '&:hover': {
                      backgroundColor: '#FFFFFF',
                      boxShadow: 'none'
                    },
                    '&:focus': {
                      boxShadow: 'none'
                    }
                  }}
                >
                  ‡∏ï‡∏Å‡∏•‡∏á
                </Button>
              </DialogContent>
            </Dialog>

            {/* Dialog ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ã‡πâ‡∏≥ */}
            <Dialog
              open={isPhoneErrorDialogOpen}
              onClick={handleDialogClose}
              aria-labelledby="alert-dialog-title"
              aria-describedby="alert-dialog-description"
              maxWidth="sm"
              PaperProps={{
                sx: {
                  width: '500px',
                  maxHeight: '230px',
                  margin: '20px',
                  borderRadius: '8px'
                }
              }}
            >
              <DialogContent sx={{ textAlign: 'center', p: 3 }}>
                <HighlightOffIcon sx={{ fontSize: 70, color: 'red', mb: 2 }} />
                <Typography id="alert-dialog-description" sx={{ fontSize: 16, color: '#05255B', mb: 2 }}>
                  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
                </Typography>

                <Button
                  onClick={handleDialogClose}
                  variant="contained"
                  sx={{
                    mt: 2,
                    mb: 4,
                    backgroundColor: '#FFFFFF',
                    color: '#05255B',
                    border: '1px solid #05255B',
                    boxShadow: 'none',
                    width: '80px',
                    height: '40px',
                    '&:hover': {
                      backgroundColor: '#FFFFFF',
                      boxShadow: 'none'
                    },
                    '&:focus': {
                      boxShadow: 'none'
                    }
                  }}
                >
                  ‡∏ï‡∏Å‡∏•‡∏á
                </Button>
              </DialogContent>
            </Dialog>

            {/* <Box
              component="footer"
              sx={{
                position: 'absolute',
                bottom: 0,
                width: '100%',
                padding: '20px 0',
                backgroundColor: '#FFFFFF',
                boxShadow: 'none',
                border: 'none',
                borderTop: 'none',
                borderTop: '1px solid #e0e0e0',
                '&::before': {
                  display: 'none' // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏≤‡∏Å‡∏°‡∏µ pseudo-element ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á
                },
                '&::after': {
                  display: 'none' // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏≤‡∏Å‡∏°‡∏µ pseudo-element ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á
                }
              }}
            >
              <Typography
                variant="body2"
                sx={{
                  textAlign: 'center',
                  color: 'text.secondary'
                }}
              >
                &copy; 2025 COPYRIGHT{' '}
                <a
                  href="https://www.tlogical.com"
                  target="_blank"
                  rel="noopener noreferrer"
                  style={{
                    color: 'inherit',
                    textDecoration: 'none'
                  }}
                >
                  THANATHAM EDUCATION CO.,LTD.
                </a>
              </Typography>
            </Box> */}
          </Grid>
        </Grid>
      </Grid>
    </AuthWrapper1>
  );
};

export default Registration;
